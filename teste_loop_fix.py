#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para verificar se o loop infinito foi corrigido
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.analyzer import AnalisadorRequerimentos

def teste_simples():
    """Teste b√°sico para verificar a inicializa√ß√£o"""
    print("üß™ Teste de corre√ß√£o do loop infinito")
    print("="*50)
    
    try:
        # Instanciar o analisador
        analisador = AnalisadorRequerimentos()
        print("‚úÖ AnalisadorRequerimentos criado com sucesso")
        
        # Verificar se o m√©todo existe
        if hasattr(analisador, '_obter_escopo_analise'):
            print("‚úÖ M√©todo _obter_escopo_analise encontrado")
        else:
            print("‚ùå M√©todo _obter_escopo_analise n√£o encontrado")
            
        # Verificar se o m√©todo de sele√ß√£o existe
        if hasattr(analisador, '_selecionar_requerimento_especifico'):
            print("‚úÖ M√©todo _selecionar_requerimento_especifico encontrado")
        else:
            print("‚ùå M√©todo _selecionar_requerimento_especifico n√£o encontrado")
            
        print("\nüìã Estrutura corrigida:")
        print("- Adicionadas op√ß√µes de cancelamento ('c', 'cancelar', 'voltar', '0')")
        print("- Tratamento de KeyboardInterrupt adicionado")
        print("- Retorno 'CANCELAR' em caso de erro ou cancelamento")
        
        print("\n‚úÖ Corre√ß√£o implementada com sucesso!")
        print("üí° O usu√°rio agora pode sair dos loops usando as op√ß√µes de cancelamento")
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    teste_simples()